-홈페이지 : https://spring.io/projects/spring-boot
-레퍼런스 : https://docs.spring.io/spring-boot/docs/current/reference/html/
---------------------------------------------------------------------------------

0. 탄생동기, 발전역사, 특징, 장단점
-특징: Srping의 복잡한 xml설정을 제거(내부적으로 수행) 또는 Java annotaion으로 표현하고,
         기존 오픈소스 프로젝트들에서 개발된 엔진들을 dependency추가로 쉽게 사용하게 함
---------------------------------------------------------------------------------

1. anotation

@SpringBootApplication //= @Configuration + @EnableAutoConfiguration + @ComponentScan
(*주의 @SpringBootApplication는 최상의 패키지에 선언해야, 하위 패키지의 class들을 ComponentScan 가능하다.)

---------------------------------------------------------------------------------

2. application.properties 설정

server.port=8080 # Server HTTP port.
spring.mvc.view.prefix=/WEB-INF/jsp/ # Spring MVC view prefix.
spring.mvc.view.suffix=.jsp # Spring MVC view suffix.

---------------------------------------------------------------------------------

3. db연동
 3-1) @EnableAutoConfiguration 선언
  >spring.datasource.*를 읽어서 DataSource의 디폴트 구현체인 org.apache.tomcat.jdbc.pool.DataSource를 자동으로 설정
 3-2) application.properties 속성 정의
  spring.datasource.url=jdbc:mysql://localhost/test
  spring.datasource.username=dbuser
  spring.datasource.password=dbpass
  spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 3-3) 사용
  @Autowired
  private final JdbcTemplate jdbcTemplate;

 3-4) JPA 연동
  >발전역사: jdbc->ibatis(mybatis)->ORM(hibernate)->JPA
  >설명: ORM에서 xml설정을 java annotation으로 표현하고, 비즈니스 로직 개발에 집중할수 있게 함
    (단점: 러닝커브 발생(새로 익혀야할 개념들이 있음))
  >작업순서: db연결설정(spring.datasource.*)->Java클래스(Entity) 작성->Repository 인테페이스 작성(crud or jpa 레파지토리 클래스 상속)
           ->JPA properties 추가설정(DDL등 사용시)
  3-4-1)Entity클래스 설계
   >http://onemooon.tistory.com/entry/JPA-%EA%B0%84%EB%8B%A8%ED%95%9C-CRUD-%EC%98%88%EC%A0%9C
   >@Entity, @Id, @Column, @Table
  3-4-2)Repository 인터페이스 설계
   >별도의 클래스 파일을 작성하지 않고 원하는 인터페이스를 구현하는 것 만으로도 JPA와 관련된 모든 처리가 끝나게 됩니다
------------------------------------------
Repository<T,ID>
 >인터페이스는 < T , ID > 두 개의 제네릭 타입을 사용하는 것을 볼 수 있는데 , 
   T 는 엔티티의 타입 클래스이고, ID 는 PrimaryKey 값입니다. 
   ID 는 반드시 ( java.io.Serializable ) 인터페이스 타입이어야 합니다.
CrudRepository<T,ID> 
 >Repository 는 실제로 별 기능이 없기 때문에 가장 많이 사용되는 것은 기본적인 CRUD(Create Read Update Delete ) 기능이 있는 CrudRepository<T,ID>를 많이 사용하는 편입니다.
PagingAndSortingRepository<T,ID>
 >페이징 처리, 검색 등이 가능
JpaRepository<T,ID>
 >JPA 에 특화된 몇 개의 기능을 가진 JpaRepository<T,ID> 를 사용할 수도 있습니다.
------------------------------------------
   >ex) public interface UserRepository extends JpaRepository<User, Long> { }
  3-4-3)JPA 추가설정(생략)